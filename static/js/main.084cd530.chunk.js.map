{"version":3,"sources":["Components/Header.Component.jsx","Redux/ActionCreator/HandleFormSubmit.ActionCreator.js","Components/Sub_Components/MainForm.SubCom.jsx","assets/spr.svg","Redux/ActionCreator/HandleRemoveListItem.ActionCreator.js","Components/Sub_Components/MainListItem.SubCom.jsx","Redux/ActionCreator/HandleModel.ActionCreator.js","Components/Sub_Components/MainList.SubCom.jsx","Components/Main.Component.jsx","Redux/ActionCreator/HandleUpdateListItem.ActionCreator.js","Components/Model.Component.jsx","App.js","Redux/defaultState.js","Redux/Reducers/AppReducer.js","Redux/Reducers/index.js","Redux/Store/Store.js","index.js"],"names":["connect","state","AppReducer","total","className","HandleFormSubmit","essentials","dispatch","getState","a","_total","parseInt","amount","type","payload","handleFormSubmit","props","useState","setEssentials","handleChange","e","target","name","value","onSubmit","preventDefault","handleSubmit","onChange","placeholder","required","DefaultValue","RemoveListItem","index","list","find","_item","_index","_newList","filter","item","removeListItem","showModel","document","body","style","overflow","selectedItem","HandleShowModel","title","note","date","onClick","handleShowModel","xlinkHref","svg","handleClose","map","Main","HandleUpdateListItem","forEach","closeModel","update","handleUpdateListItem","display","handleUpdateSubmit","defaultValue","App","defaultState","loading","error","action","persistConfig","key","storage","whitelist","RootReducer","combineReducers","persistReducer","Middlewares","logger","thunk","Store","createStore","applyMiddleware","persistor","persistStore","ReactDom","render","store","getElementById"],"mappings":"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","file":"static/js/main.084cd530.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction Header({ total }) {\n  return (\n    <header className=\"header\">\n      <h1 className=\"header-title\">My Expenses</h1>\n      <p className=\"header-para\">Total</p>\n      <p className=\"header-count\">{total}</p>\n    </header>\n  );\n}\n\n// Dispatcher that help to dispatch the action creators...\nconst mapStateToProps = (state) => {\n  return state.AppReducer;\n};\n\nexport default connect(mapStateToProps)(Header);\n","const HandleFormSubmit = (essentials) => {\n  return async function (dispatch, getState) {\n    const {\n      AppReducer: { total },\n    } = await getState();\n\n    //Calculating the total\n    const _total = total + parseInt(essentials.amount);\n\n    dispatch({ type: \"HANDLE_FORM_SUBMIT\", payload: { essentials, _total } });\n  };\n};\n\nexport default HandleFormSubmit;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport HandleFormSubmit from \"../../Redux/ActionCreator/HandleFormSubmit.ActionCreator\";\n\nfunction MainForm(props) {\n  const { handleFormSubmit } = props;\n\n  //State Hook\n  const [essentials, setEssentials] = useState({});\n\n  //Helper function\n\n  //On Change handler...\n  const handleChange = (e) => {\n    setEssentials({ ...essentials, [e.target.name]: e.target.value });\n  };\n\n  //On submit handler...\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    handleFormSubmit(essentials);\n  };\n\n  return (\n    <>\n      <div className=\"main__form\">\n        <form onSubmit={(e) => handleSubmit(e)}>\n          <div>\n            <input\n              onChange={(e) => handleChange(e)}\n              className=\"main__input\"\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Title\"\n              required\n              DefaultValue=\"\"\n            />\n          </div>\n          <div>\n            <input\n              onChange={(e) => handleChange(e)}\n              className=\"main__input\"\n              type=\"number\"\n              name=\"amount\"\n              placeholder=\"Amount\"\n              required\n              DefaultValue=\"\"\n            />\n          </div>\n\n          <div>\n            <input\n              onChange={(e) => handleChange(e)}\n              className=\"main__input\"\n              type=\"text\"\n              name=\"note\"\n              placeholder=\"Note\"\n              required\n              DefaultValue=\"\"\n            />\n          </div>\n\n          <div>\n            <input\n              onChange={(e) => handleChange(e)}\n              className=\"main__input\"\n              type=\"date\"\n              name=\"date\"\n              placeholder=\"Date\"\n              required\n              DefaultValue=\"\"\n            />\n          </div>\n          <button type=\"submit\" className=\"main__btn\">\n            Add Expenses\n          </button>\n        </form>\n      </div>\n    </>\n  );\n}\n\n// Convert the store states into the props...\nconst mapStateToProps = (state) => {\n  return state.AppReducer;\n};\n\n// Dispatcher that help to dispatch the action creators...\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleFormSubmit: (essentials) => dispatch(HandleFormSubmit(essentials)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainForm);\n","export default __webpack_public_path__ + \"static/media/spr.b5ecea19.svg\";","const RemoveListItem = (index) => {\n  return async function (dispatch, getState) {\n    const {\n      AppReducer: { total, list },\n    } = await getState();\n\n    //Search the related item from list and return that item...\n    let _total = list.find((_item, _index) => {\n      if (index === _index) {\n        return _item;\n      }\n\n      return null;\n    });\n\n    //Calculating the total\n    _total = total - parseInt(_total.amount);\n\n    if (_total < 0) {\n      _total = 0;\n    }\n\n    //Creating new list and then send that list by payload..\n    const _newList = list.filter((item, _index) => {\n      if (_index !== index) return item;\n    });\n\n    dispatch({ type: \"REMOVE_LIST_ITEM\", payload: { _newList, _total } });\n  };\n};\n\nexport default RemoveListItem;\n","import React from \"react\";\nimport svg from \"../../assets/spr.svg\";\nimport RemoveListItem from \"../../Redux/ActionCreator/HandleRemoveListItem.ActionCreator\";\nimport { HandleShowModel } from \"../../Redux/ActionCreator/HandleModel.ActionCreator\";\nimport { connect } from \"react-redux\";\n\nfunction MainListItem({\n  title,\n  amount,\n  note,\n  date,\n  index,\n  removeListItem,\n  showModel,\n}) {\n  //Helper function\n\n  //Handle the close event...\n  const handleClose = (index) => {\n    removeListItem(index);\n  };\n\n  //Handle the show model event..\n  const handleShowModel = (index) => {\n    showModel(index);\n  };\n\n  return (\n    <>\n      <li className=\"main__list-item\">\n        <button\n          onClick={() => handleShowModel(index)}\n          className=\"main__list-item-btn\"\n        >\n          <svg className=\"main__list-item-icon\">\n            <use xlinkHref={`${svg}#icon-edit-2`}></use>\n          </svg>\n        </button>\n        <section className=\"list-item-content\">\n          <h4 className=\"list-item-content-date\">{date}</h4>\n          <div className=\"list-item-content-data\">\n            <p className=\"list-item-content-data-title\">{title}</p>\n            <span className=\"list-item-content-data-amount\">{amount}</span>\n          </div>\n          <small className=\"list-item-content-note\">Note: {note}</small>\n        </section>\n        <button\n          onClick={() => handleClose(index)}\n          className=\"main__list-item-btn\"\n        >\n          <svg className=\"main__list-item-icon\">\n            <use xlinkHref={`${svg}#icon-x-circle`}></use>\n          </svg>\n        </button>\n      </li>\n    </>\n  );\n}\n\n// Convert the store states into the props...\nconst mapStateToProps = (state) => {\n  return state.AppReducer;\n};\n\n// Dispatcher that help to dispatch the action creators...\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeListItem: (index) => dispatch(RemoveListItem(index)),\n    showModel: (index) => dispatch(HandleShowModel(index)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainListItem);\n","export const HandleShowModel = (index) => {\n  document.body.style.overflow = \"hidden\";\n  return async function (dispatch, getState) {\n    const {\n      AppReducer: { list },\n    } = await getState();\n\n    //Search the related item from list and return that item...\n    let selectedItem = list.find((_item, _index) => {\n      if (index === _index) {\n        return _item;\n      }\n    });\n\n    //Adding a index key value into that item that help us while updating the items form the list..\n\n    selectedItem = { ...selectedItem, index: index };\n\n    dispatch({ type: \"HANDLE_SHOW_MODEL\", payload: selectedItem });\n  };\n};\n\nexport const HandleCloseModel = () => {\n  document.body.style.overflow = \"scroll\";\n  return function (dispatch) {\n    dispatch({ type: \"HANDLE_CLOSE_MODEL\" });\n  };\n};\n","import React from \"react\";\nimport MainListItem from \"./MainListItem.SubCom\";\nimport { connect } from \"react-redux\";\n\nfunction MainList({ list }) {\n  return (\n    <>\n      <div className=\"main__list__container\">\n        <ul className=\"main__list\">\n          {list &&\n            list.map((item, index) => {\n              return <MainListItem key={index} index={index} {...item} />;\n            })}\n        </ul>\n      </div>\n    </>\n  );\n}\n\n// Convert the store states into the props...\nconst mapStateToProps = (state) => {\n  return state.AppReducer;\n};\n\nexport default connect(mapStateToProps)(MainList);\n","import React from \"react\";\nimport MainForm from \"./Sub_Components/MainForm.SubCom\";\nimport MainList from \"./Sub_Components/MainList.SubCom\";\n\nfunction Main() {\n  return (\n    <main className=\"main\">\n      <MainForm />\n      <MainList />\n    </main>\n  );\n}\n\nexport default Main;\n","const HandleUpdateListItem = (item) => {\n  return async function (dispatch, getState) {\n    const {\n      AppReducer: { selectedItem, list },\n    } = await getState();\n\n    //Check the selected item that need to be updated and then update the data in that item..\n    let _newList = list.map((_item, _index) => {\n      if (_index === selectedItem.index) {\n        return {\n          ..._item,\n          title: item.title,\n          amount: item.amount,\n          note: item.note,\n          date: item.date,\n          index: item.index,\n        };\n      }\n\n      return _item;\n    });\n\n    let _total = 0;\n\n    //Recalculating the total after the updation if the list..\n    _newList.forEach((_item) => {\n      _total += parseInt(_item.amount);\n    });\n\n    dispatch({ type: \"UPDATE_LIST_ITEM\", payload: { _newList, _total } });\n  };\n};\n\nexport default HandleUpdateListItem;\n","import React, { useState, useEffect } from \"react\";\nimport { HandleCloseModel } from \"../Redux/ActionCreator/HandleModel.ActionCreator\";\nimport HandleUpdateListItem from \"../Redux/ActionCreator/HandleUpdateListItem.ActionCreator\";\nimport { connect } from \"react-redux\";\n\nfunction Model({ closeModel, showModel, selectedItem, update }) {\n  //State Hooks\n  const [essentials, setEssentials] = useState({});\n\n  //Helper function\n\n  // Model Close Handler....\n  const handleCloseModel = () => {\n    closeModel();\n  };\n\n  // Model Upadate Handler....\n  const handleUpdateListItem = (e) => {\n    setEssentials({ ...selectedItem, [e.target.name]: e.target.value });\n  };\n\n  //Model Submit handler...\n  const handleUpdateSubmit = (e) => {\n    e.preventDefault();\n    update(essentials);\n  };\n\n  return (\n    <>\n      <div\n        style={showModel ? { display: \"flex\" } : { display: \"none\" }}\n        className=\"model-container\"\n      >\n        <div className=\"model\">\n          <h2 className=\"model-headline\">Update Expense</h2>\n          <form onSubmit={(e) => handleUpdateSubmit(e)}>\n            <div>\n              <input\n                onChange={(e) => handleUpdateListItem(e)}\n                className=\"model__input\"\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Update Title\"\n                defaultValue={selectedItem === {} ? \"\" : selectedItem.title}\n                required\n              />\n            </div>\n            <div>\n              <input\n                onChange={(e) => handleUpdateListItem(e)}\n                className=\"model__input\"\n                type=\"number\"\n                name=\"amount\"\n                placeholder=\"Update Amount\"\n                defaultValue={selectedItem === {} ? \"\" : selectedItem.amount}\n                required\n              />\n            </div>\n            <div>\n              <input\n                onChange={(e) => handleUpdateListItem(e)}\n                className=\"model__input\"\n                type=\"text\"\n                name=\"note\"\n                placeholder=\"Update Note\"\n                defaultValue={selectedItem === {} ? \"\" : selectedItem.note}\n                required\n              />\n            </div>\n            <div>\n              <input\n                onChange={(e) => handleUpdateListItem(e)}\n                className=\"model__input\"\n                type=\"date\"\n                name=\"date\"\n                placeholder=\"Update Date\"\n                defaultValue={selectedItem === {} ? \"\" : selectedItem.date}\n                required\n              />\n            </div>\n\n            <div className=\"model-btn-container\">\n              <button\n                type=\"button\"\n                onClick={() => handleCloseModel()}\n                className=\"model-btn\"\n              >\n                Cancel\n              </button>\n              <button className=\"model-btn\">Update</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n}\n\n// Dispatcher that help to dispatch the action creators...\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    closeModel: () => dispatch(HandleCloseModel()),\n    update: (essentials) => dispatch(HandleUpdateListItem(essentials)),\n  };\n};\n\n// Convert the store states into the props...\nconst mapStateToProps = (state) => {\n  return state.AppReducer;\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Model);\n","import React from \"react\";\nimport Header from \"./Components/Header.Component\";\nimport Main from \"./Components/Main.Component\";\nimport Model from \"./Components/Model.Component\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Header />\n      <Main />\n      <Model />\n    </div>\n  );\n}\n\nexport default App;\n","export const defaultState = {\n  loading: true,\n  error: \"\",\n  list: [],\n  total: 0,\n  showModel: false,\n  selectedItem: {},\n};\n","import { defaultState } from \"../defaultState\";\n\nconst AppReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    //Handle the form submition...\n    case \"HANDLE_FORM_SUBMIT\":\n      return {\n        ...state,\n        list: [...state.list, action.payload.essentials],\n        total: action.payload._total,\n      };\n\n    //Handle the remove item from list...\n    case \"REMOVE_LIST_ITEM\":\n      return {\n        ...state,\n        list: action.payload._newList,\n        total: action.payload._total,\n      };\n\n    //Handle the model show event and put that item into selectedItem variable..\n    case \"HANDLE_SHOW_MODEL\":\n      return {\n        ...state,\n        showModel: true,\n        selectedItem: action.payload,\n      };\n\n    //Handle the model close event..\n    case \"HANDLE_CLOSE_MODEL\":\n      return {\n        ...state,\n        showModel: false,\n        selectedItem: {},\n      };\n\n    //Handle the update event of an item in the list..\n    case \"UPDATE_LIST_ITEM\":\n      return {\n        ...state,\n        list: action.payload._newList,\n        total: action.payload._total,\n        showModel: false,\n        selectedItem: state.selectedItem,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default AppReducer;\n","import { combineReducers } from \"redux\";\nimport AppReducer from \"./AppReducer\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: storage,\n  whitelist: [\"AppReducer\"],\n};\n\nconst RootReducer = combineReducers({ AppReducer });\n\nexport default persistReducer(persistConfig, RootReducer);\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport RootReducer from \"../Reducers/index\";\nimport thunk from \"redux-thunk\";\nimport { persistStore } from \"redux-persist\";\n\nconst Middlewares = [logger, thunk];\n\nexport const Store = createStore(RootReducer, applyMiddleware(...Middlewares));\n\nexport const persistor = persistStore(Store);\n\nexport default Store;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from \"./App\";\nimport \"./Css/index.css\";\nimport { Store, persistor } from \"./Redux/Store/Store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDom.render(\n  <Provider store={Store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}